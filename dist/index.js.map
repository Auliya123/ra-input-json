{"version":3,"sources":["../src/index.js"],"names":["RaJSONEditor","renderTextField","input","label","meta","touched","error","custom","props","source","width","labelStyle","required","rest","marginTop","marginBottom","color","fontSize","lineHeight","uniqueId","value","JSON","parse","locale","changeHandler","onChange","json","jsObject","stringify","viewOnly","record","React","Component","propTypes","PropTypes","string","isRequired","className","JSONEView","JSONEditor"],"mappings":";;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;IAEMA,Y;;;;;;;;;;;;;;kMAqBJC,e,GAAkB,iBAA2D;AAAA,UAAxDC,KAAwD,SAAxDA,KAAwD;AAAA,UAAjDC,KAAiD,SAAjDA,KAAiD;AAAA,6BAA1CC,IAA0C;AAAA,UAAlCC,OAAkC,cAAlCA,OAAkC;AAAA,UAAzBC,KAAyB,cAAzBA,KAAyB;AAAA,UAAbC,MAAa;;AAAA,wBAOvE,MAAKC,KAPkE;AAAA,UAEzEC,MAFyE,eAEzEA,MAFyE;AAAA,UAGzEC,KAHyE,eAGzEA,KAHyE;AAAA,UAIzEC,UAJyE,eAIzEA,UAJyE;AAAA,UAKzEC,QALyE,eAKzEA,QALyE;AAAA,UAMtEC,IANsE;;AAQ3E,aACE;AAAC,uBAAD,CAAO,QAAP;AAAA;AACE;AAAC,8BAAD;AAAA,YAAY,WAAU,MAAtB,EAA6B,OAAOF,cAAc,EAACG,WAAW,KAAZ,EAAmBC,cAAc,KAAjC,EAAwCC,OAAO,SAA/C,EAA0DC,UAAU,KAApE,EAA2EC,YAAY,KAAvF,EAAlD;AACCf,eADD;AAAA;AACSS,sBAAY;AADrB,SADF;AAII;AAAC,yBAAD;AAAA,YAAO,OAAO,EAACF,OAAOA,SAAS,KAAjB,EAAd;AACE,wCAAC,6BAAD;AACE,gBAASS,gBAAT,eADF;AAEE,yBAAiBjB,MAAMkB,KAAN,IAAeC,KAAKC,KAAL,CAAWpB,MAAMkB,KAAjB,CAAhB,IAA4C,IAF9D;AAGE,mBAAQ,yBAHV;AAIE,oBAAWG,YAJb;AAKE,oBAAS,OALX;AAME,mBAAM,MANR;AAOE,sBAAU,MAAKC,aAAL,CAAmBtB,MAAMuB,QAAzB,CAPZ;AAQE,8BAAkB;AARpB,aASMZ,IATN;AADF;AAJJ,OADF;AAoBD,K,QAEDW,a,GAAgB;AAAA,aAAY,iBAA6B;AAAA,YAA3BE,IAA2B,SAA3BA,IAA2B;AAAA,YAArBpB,KAAqB,SAArBA,KAAqB;AAAA,YAAdqB,QAAc,SAAdA,QAAc;;AACvDrB,kBAAU,KAAV,IAAmBmB,SAASE,WAAWN,KAAKO,SAAL,CAAeD,QAAf,CAAX,GAAsC,EAA/C,CAAnB;AACD,OAFe;AAAA,K;;;;;6BAlDR;AAAA,mBAIF,KAAKnB,KAJH;AAAA,UAEJC,MAFI,UAEJA,MAFI;AAAA,UAGDI,IAHC;;AAKN,aACE;AAAA;AAAA;AACGA,aAAKgB,QAAL,GAAiB,8BAAC,6BAAD;AACZ,cAASV,gBAAT,eADY;AAEZ,uBAAiBN,KAAKiB,MAAL,CAAYrB,MAAZ,KAAuBY,KAAKC,KAAL,CAAWT,KAAKiB,MAAL,CAAYrB,MAAZ,CAAX,CAAxB,IAA4D,IAFhE;AAGZ,iBAAQ,yBAHI;AAIZ,kBAAWc,YAJC;AAKZ,kBAAS,OALG;AAMZ,iBAAM;AANM,WAORV,IAPQ,EAAjB,GAQU,8BAAC,gBAAD,aAAO,MAAMJ,MAAb,EAAqB,WAAW,KAAKR,eAArC,EAAuD,OAAM,YAA7D,IAA8EY,IAA9E;AATb,OADF;AAaD;;;;EAnBwBkB,gBAAMC,S;;AAyDjChC,aAAaiC,SAAb,GAAyB;AACvBxB,UAAQyB,oBAAUC,MAAV,CAAiBC,UADF;AAEvBjC,SAAO+B,oBAAUC,MAFM;AAGvBE,aAAWH,oBAAUC;AAHE,CAAzB;;AAMO,IAAMG,gCAAY,4BAAa,EAACT,UAAU,IAAX,EAAb,EAA+B7B,YAA/B,CAAlB;AACA,IAAMuC,kCAAa,sBAASvC,YAAT,CAAnB","file":"index.js","sourcesContent":["import React from 'react';\nimport JSONInput from 'react-json-editor-ajrm';\nimport locale    from 'react-json-editor-ajrm/locale/en';\nimport { Field } from 'redux-form';\nimport uniqueId from 'lodash.uniqueid'\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport defaultProps from 'recompose/defaultProps'\nimport PropTypes from 'prop-types';\nimport { addField } from 'ra-core';\n\nclass RaJSONEditor extends React.Component {\n  render(){\n    const {\n      source,\n      ...rest\n    } = this.props;\n    return (\n      <div>\n        {rest.viewOnly ? (<JSONInput\n              id = {`${uniqueId}-outer-box`}\n              placeholder = { (rest.record[source] && JSON.parse(rest.record[source])) || null}\n              theme = \"light_mitsuketa_tribute\"\n              locale = { locale }\n              height = '250px'\n              width=\"100%\"\n              {...rest}\n            />) : (<Field name={source} component={this.renderTextField}  label=\"jsonEditor\" {...rest} />)}\n      </div>\n    )\n  }\n\n  renderTextField = ({ input, label, meta: { touched, error }, ...custom }) => {\n    const {\n      source,\n      width,\n      labelStyle,\n      required,\n      ...rest\n    } = this.props;\n    return (\n      <React.Fragment>\n        <Typography component=\"span\" style={labelStyle || {marginTop: \"8px\", marginBottom: \"8px\", color: \"#919191\", fontSize: \".8e\", lineHeight: \"1em\"}}>\n        {label} {required && \" *\"}\n        </Typography>\n          <Paper style={{width: width || \"50%\"}}>\n            <JSONInput\n              id = {`${uniqueId}-outer-box`}\n              placeholder = { (input.value && JSON.parse(input.value)) || null}\n              theme = \"light_mitsuketa_tribute\"\n              locale = { locale }\n              height = '250px'\n              width=\"100%\"\n              onChange={this.changeHandler(input.onChange)}\n              onKeyPressUpdate={false}\n              {...rest}\n            />\n          </Paper>\n      </React.Fragment>\n    );\n  }\n\n  changeHandler = onChange => ({json, error, jsObject}) => {\n    error === false && onChange(jsObject ? JSON.stringify(jsObject) : '');\n  }\n\n}\n\nRaJSONEditor.propTypes = {\n  source: PropTypes.string.isRequired,\n  label: PropTypes.string,\n  className: PropTypes.string,\n}\n\nexport const JSONEView = defaultProps({viewOnly: true})(RaJSONEditor);\nexport const JSONEditor = addField(RaJSONEditor);\n"]}