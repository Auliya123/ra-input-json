{"version":3,"sources":["../src/index.js"],"names":["RaJSONEditor","renderTextField","input","label","props","source","width","labelStyle","required","rest","uniqueId","value","JSON","parse","locale","changeHandler","onChange","json","error","jsObject","stringify","viewOnly","record","React","Component","propTypes","PropTypes","string","isRequired","className","JSONEView","JSONEditor"],"mappings":";;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;IAEMA,Y;;;;;;;;;;;;;;kMAqBJC,e,GAAkB,iBAAqB;AAAA,UAAlBC,KAAkB,SAAlBA,KAAkB;AAAA,UAAXC,KAAW,SAAXA,KAAW;;AAAA,wBAOjC,MAAKC,KAP4B;AAAA,UAEnCC,MAFmC,eAEnCA,MAFmC;AAAA,UAGnCC,KAHmC,eAGnCA,KAHmC;AAAA,UAInCC,UAJmC,eAInCA,UAJmC;AAAA,UAKnCC,QALmC,eAKnCA,QALmC;AAAA,UAMhCC,IANgC;;AAQrC,aACE;AAAC,uBAAD,CAAO,QAAP;AAAA;AAII;AAAC,yBAAD;AAAA,YAAO,OAAO,EAACH,OAAOA,SAAS,KAAjB,EAAd;AACE,wCAAC,6BAAD;AACE,gBAASI,gBAAT,eADF;AAEE,yBAAiBR,MAAMS,KAAN,IAAeC,KAAKC,KAAL,CAAWX,MAAMS,KAAjB,CAAhB,IAA4C,IAF9D;AAGE,mBAAQ,yBAHV;AAIE,oBAAWG,YAJb;AAKE,oBAAS,OALX;AAME,mBAAM,MANR;AAOE,sBAAU,MAAKC,aAAL,CAAmBb,MAAMc,QAAzB,CAPZ;AAQE,8BAAkB;AARpB,aASMP,IATN;AADF;AAJJ,OADF;AAoBD,K,QAEDM,a,GAAgB;AAAA,aAAY,iBAA6B;AAAA,YAA3BE,IAA2B,SAA3BA,IAA2B;AAAA,YAArBC,KAAqB,SAArBA,KAAqB;AAAA,YAAdC,QAAc,SAAdA,QAAc;;AACvDD,kBAAU,KAAV,IAAmBF,SAASG,WAAWP,KAAKQ,SAAL,CAAeD,QAAf,CAAX,GAAsC,EAA/C,CAAnB;AACD,OAFe;AAAA,K;;;;;6BAlDR;AAAA,mBAIF,KAAKf,KAJH;AAAA,UAEJC,MAFI,UAEJA,MAFI;AAAA,UAGDI,IAHC;;AAKN,aACE;AAAA;AAAA;AACGA,aAAKY,QAAL,GAAiB,8BAAC,6BAAD;AACZ,cAASX,gBAAT,eADY;AAEZ,uBAAiBD,KAAKa,MAAL,CAAYjB,MAAZ,KAAuBO,KAAKC,KAAL,CAAWJ,KAAKa,MAAL,CAAYjB,MAAZ,CAAX,CAAxB,IAA4D,IAFhE;AAGZ,iBAAQ,yBAHI;AAIZ,kBAAWS,YAJC;AAKZ,kBAAS,OALG;AAMZ,iBAAM;AANM,WAORL,IAPQ,EAAjB,GAQU,8BAAC,gBAAD,aAAO,MAAMJ,MAAb,EAAqB,WAAW,KAAKJ,eAArC,EAAuD,OAAM,YAA7D,IAA8EQ,IAA9E;AATb,OADF;AAaD;;;;EAnBwBc,gBAAMC,S;;AAyDjCxB,aAAayB,SAAb,GAAyB;AACvBpB,UAAQqB,oBAAUC,MAAV,CAAiBC,UADF;AAEvBzB,SAAOuB,oBAAUC,MAFM;AAGvBE,aAAWH,oBAAUC;AAHE,CAAzB;;AAMO,IAAMG,gCAAY,4BAAa,EAACT,UAAU,IAAX,EAAb,EAA+BrB,YAA/B,CAAlB;AACA,IAAM+B,kCAAa,sBAAS/B,YAAT,CAAnB","file":"index.js","sourcesContent":["import React from 'react';\nimport JSONInput from 'react-json-editor-ajrm';\nimport locale    from 'react-json-editor-ajrm/locale/en';\nimport { Field } from 'redux-form';\nimport uniqueId from 'lodash.uniqueid'\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport defaultProps from 'recompose/defaultProps'\nimport PropTypes from 'prop-types';\nimport { addField } from 'ra-core';\n\nclass RaJSONEditor extends React.Component {\n  render(){\n    const {\n      source,\n      ...rest\n    } = this.props;\n    return (\n      <div>\n        {rest.viewOnly ? (<JSONInput\n              id = {`${uniqueId}-outer-box`}\n              placeholder = { (rest.record[source] && JSON.parse(rest.record[source])) || null}\n              theme = \"light_mitsuketa_tribute\"\n              locale = { locale }\n              height = '250px'\n              width=\"100%\"\n              {...rest}\n            />) : (<Field name={source} component={this.renderTextField}  label=\"jsonEditor\" {...rest} />)}\n      </div>\n    )\n  }\n\n  renderTextField = ({ input, label}) => {\n    const {\n      source,\n      width,\n      labelStyle,\n      required,\n      ...rest\n    } = this.props;\n    return (\n      <React.Fragment>\n{/*         <Typography component=\"span\" style={labelStyle || {marginTop: \"8px\", marginBottom: \"8px\", color: \"#919191\", fontSize: \".8e\", lineHeight: \"1em\"}}>\n        {label} {required && \" *\"}\n        </Typography> */}\n          <Paper style={{width: width || \"50%\"}}>\n            <JSONInput\n              id = {`${uniqueId}-outer-box`}\n              placeholder = { (input.value && JSON.parse(input.value)) || null}\n              theme = \"light_mitsuketa_tribute\"\n              locale = { locale }\n              height = '250px'\n              width=\"100%\"\n              onChange={this.changeHandler(input.onChange)}\n              onKeyPressUpdate={false}\n              {...rest}\n            />\n          </Paper>\n      </React.Fragment>\n    );\n  }\n\n  changeHandler = onChange => ({json, error, jsObject}) => {\n    error === false && onChange(jsObject ? JSON.stringify(jsObject) : '');\n  }\n\n}\n\nRaJSONEditor.propTypes = {\n  source: PropTypes.string.isRequired,\n  label: PropTypes.string,\n  className: PropTypes.string,\n}\n\nexport const JSONEView = defaultProps({viewOnly: true})(RaJSONEditor);\nexport const JSONEditor = addField(RaJSONEditor);"]}